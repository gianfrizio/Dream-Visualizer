import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../l10n/app_localizations.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({Key? key}) : super(key: key);

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _nameController = TextEditingController();

  bool _isLogin = true; // true = login, false = registrazione
  bool _obscurePassword = true;
  bool _isLoading = false;
  String? _error;

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    _nameController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final localizations = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(
        title: Text(_isLogin ? localizations.login : localizations.register),
        backgroundColor: Colors.transparent,
        elevation: 0,
      ),
      body: Consumer(
        builder: (context, provider, child) {
          return SingleChildScrollView(
            padding: const EdgeInsets.all(24.0),
            child: Form(
              key: _formKey,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  // Logo e titolo
                  const SizedBox(height: 40),
                  Icon(
                    Icons.bedtime,
                    size: 80,
                    color: theme.colorScheme.primary,
                  ),
                  const SizedBox(height: 16),
                  Text(
                    'Dream Visualizer',
                    style: theme.textTheme.headlineMedium?.copyWith(
                      fontWeight: FontWeight.bold,
                      color: theme.colorScheme.primary,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    _isLogin
                        ? localizations.loginToAccount
                        : localizations.createNewAccount,
                    style: theme.textTheme.bodyLarge?.copyWith(
                      color: theme.colorScheme.onSurface.withOpacity(0.7),
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 40),

                  // Campo Nome (solo per registrazione)
                  if (!_isLogin) ...[
                    TextFormField(
                      controller: _nameController,
                      decoration: InputDecoration(
                        labelText: localizations.displayName,
                        prefixIcon: const Icon(Icons.person),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        filled: true,
                        fillColor: theme.colorScheme.surface,
                      ),
                      validator: (value) {
                        if (!_isLogin &&
                            (value == null || value.trim().isEmpty)) {
                          return localizations.nameRequired;
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 16),
                  ],

                  // Campo Email
                  TextFormField(
                    controller: _emailController,
                    keyboardType: TextInputType.emailAddress,
                    decoration: InputDecoration(
                      labelText: localizations.email,
                      prefixIcon: const Icon(Icons.email),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      filled: true,
                      fillColor: theme.colorScheme.surface,
                    ),
                    validator: (value) {
                      if (value == null || value.trim().isEmpty) {
                        return localizations.emailRequired;
                      }
                      if (!RegExp(
                        r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$',
                      ).hasMatch(value)) {
                        return localizations.emailInvalid;
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 16),

                  // Campo Password
                  TextFormField(
                    controller: _passwordController,
                    obscureText: _obscurePassword,
                    decoration: InputDecoration(
                      labelText: localizations.password,
                      prefixIcon: const Icon(Icons.lock),
                      suffixIcon: IconButton(
                        icon: Icon(
                          _obscurePassword
                              ? Icons.visibility
                              : Icons.visibility_off,
                        ),
                        onPressed: () {
                          setState(() {
                            _obscurePassword = !_obscurePassword;
                          });
                        },
                      ),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      filled: true,
                      fillColor: theme.colorScheme.surface,
                    ),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return localizations.passwordRequired;
                      }
                      if (!_isLogin && value.length < 6) {
                        return localizations.passwordTooShort;
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 24),

                  // Messaggio di errore
                  if (_error != null) ...[
                    Container(
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: theme.colorScheme.errorContainer,
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Row(
                        children: [
                          Icon(
                            Icons.error_outline,
                            color: theme.colorScheme.error,
                          ),
                          const SizedBox(width: 8),
                          Expanded(
                            child: Text(
                              _error!,
                              style: TextStyle(color: theme.colorScheme.error),
                            ),
                          ),
                          IconButton(
                            icon: const Icon(Icons.close),
                            onPressed: () => setState(() => _error = null),
                            iconSize: 20,
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(height: 16),
                  ],

                  // Pulsante principale
                  SizedBox(
                    height: 50,
                    child: ElevatedButton(
                      onPressed: _isLoading ? null : _submitForm,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: theme.colorScheme.primary,
                        foregroundColor: theme.colorScheme.onPrimary,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: _isLoading
                          ? const SizedBox(
                              height: 20,
                              width: 20,
                              child: CircularProgressIndicator(strokeWidth: 2),
                            )
                          : Text(
                              _isLogin
                                  ? localizations.login
                                  : localizations.register,
                              style: const TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                    ),
                  ),
                  const SizedBox(height: 16),

                  // Link password dimenticata (solo per login)
                  if (_isLogin) ...[
                    TextButton(
                      onPressed: _showForgotPasswordDialog,
                      child: Text(localizations.forgotPassword),
                    ),
                    const SizedBox(height: 8),
                  ],

                  // Divider
                  Row(
                    children: [
                      const Expanded(child: Divider()),
                      Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 16),
                        child: Text(
                          localizations.or,
                          style: theme.textTheme.bodySmall?.copyWith(
                            color: theme.colorScheme.onSurface.withOpacity(0.6),
                          ),
                        ),
                      ),
                      const Expanded(child: Divider()),
                    ],
                  ),
                  const SizedBox(height: 16),

                  // Switch tra login e registrazione
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        _isLogin
                            ? localizations.noAccount
                            : localizations.alreadyHaveAccount,
                        style: theme.textTheme.bodyMedium,
                      ),
                      TextButton(
                        onPressed: () {
                          setState(() {
                            _isLogin = !_isLogin;
                            _error = null;
                          });
                        },
                        child: Text(
                          _isLogin
                              ? localizations.register
                              : localizations.login,
                          style: TextStyle(
                            color: theme.colorScheme.primary,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }

  void _submitForm() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
      _error = null;
    });

    try {
      print('Iniziando ${_isLogin ? "login" : "registrazione"}...');

      // Verifica se Firebase è configurato correttamente
      bool useFirebase = true;
      try {
        print('Verificando configurazione Firebase...');
        FirebaseAuth.instance.currentUser; // Non serve await qui
        print('Firebase configurato correttamente');
      } catch (e) {
        print('Firebase non configurato correttamente, uso login locale: $e');
        print('Tipo errore Firebase: ${e.runtimeType}');
        useFirebase = false;
      }

      if (useFirebase) {
        if (_isLogin) {
          // Login con Firebase
          print(
            'Tentativo di login con email: ${_emailController.text.trim()}',
          );
          await FirebaseAuth.instance.signInWithEmailAndPassword(
            email: _emailController.text.trim(),
            password: _passwordController.text,
          );
          print('Login completato con successo');
        } else {
          // Registrazione con Firebase
          print(
            'Tentativo di registrazione con email: ${_emailController.text.trim()}',
          );
          final credential = await FirebaseAuth.instance
              .createUserWithEmailAndPassword(
                email: _emailController.text.trim(),
                password: _passwordController.text,
              );
          print('Registrazione completata, UID: ${credential.user?.uid}');

          // Aggiorna il display name se fornito
          if (_nameController.text.trim().isNotEmpty) {
            print('Aggiornamento display name: ${_nameController.text.trim()}');
            await credential.user?.updateDisplayName(
              _nameController.text.trim(),
            );
          }
        }
      } else {
        // Login/Registrazione locale (bypass per test)
        print('Uso autenticazione locale...');

        // Simula un delay per l'autenticazione
        await Future.delayed(const Duration(seconds: 1));

        // Valida i campi basilari
        if (_emailController.text.trim().isEmpty) {
          throw Exception('Email richiesta');
        }
        if (_passwordController.text.length < 6) {
          throw Exception('Password deve essere di almeno 6 caratteri');
        }

        print('Autenticazione locale completata con successo');
      }

      if (mounted) {
        print('Navigazione di ritorno con successo');
        Navigator.of(context).pop(true); // Successo
      }
    } on FirebaseAuthException catch (e) {
      print('Errore FirebaseAuth: ${e.code} - ${e.message}');
      print('Stack trace FirebaseAuth: ${e.toString()}');

      // Mostra errore più dettagliato per debug
      String errorMessage = _getLocalizedErrorMessage(e.code);
      print('Messaggio errore localizzato: $errorMessage');

      setState(() {
        _error = errorMessage;
        _isLoading = false;
      });
    } catch (e) {
      print('Errore generico durante autenticazione: $e');
      print('Tipo errore: ${e.runtimeType}');
      print('Stack trace: ${StackTrace.current}');

      setState(() {
        _error = 'Errore durante l\'autenticazione: $e';
        _isLoading = false;
      });
    }
  }

  void _showForgotPasswordDialog() {
    final emailController = TextEditingController();
    final localizations = AppLocalizations.of(context)!;

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(localizations.resetPassword),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(localizations.resetPasswordDescription),
            const SizedBox(height: 16),
            TextField(
              controller: emailController,
              keyboardType: TextInputType.emailAddress,
              decoration: InputDecoration(
                labelText: localizations.email,
                border: const OutlineInputBorder(),
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text(localizations.cancel),
          ),
          ElevatedButton(
            onPressed: () async {
              final email = emailController.text.trim();
              if (email.isNotEmpty) {
                try {
                  await FirebaseAuth.instance.sendPasswordResetEmail(
                    email: email,
                  );

                  if (mounted) {
                    Navigator.of(context).pop();

                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text(localizations.resetEmailSent),
                        backgroundColor: Colors.green,
                      ),
                    );
                  }
                } catch (e) {
                  if (mounted) {
                    Navigator.of(context).pop();

                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text(localizations.resetEmailError),
                        backgroundColor: Colors.red,
                      ),
                    );
                  }
                }
              }
            },
            child: Text(localizations.send),
          ),
        ],
      ),
    );
  }

  String _getLocalizedErrorMessage(String errorCode) {
    print('Gestendo errore con codice: "$errorCode"');

    switch (errorCode) {
      case 'weak-password':
        return 'La password è troppo debole';
      case 'email-already-in-use':
        return 'Questo indirizzo email è già in uso';
      case 'invalid-email':
        return 'Indirizzo email non valido';
      case 'user-not-found':
        return 'Nessun utente trovato con questo email';
      case 'wrong-password':
        return 'Password incorretta';
      case 'user-disabled':
        return 'Questo account è stato disabilitato';
      case 'too-many-requests':
        return 'Troppi tentativi di accesso. Riprova più tardi';
      case 'network-request-failed':
        return 'Errore di connessione. Controlla la tua connessione internet';
      case 'invalid-credential':
        return 'Credenziali non valide';
      case 'operation-not-allowed':
        return 'Operazione non consentita';
      case 'requires-recent-login':
        return 'Questa operazione richiede un accesso recente';
      case 'unknown':
        return 'Errore sconosciuto. Verifica i dati inseriti e riprova';
      case 'configuration-not-found':
        return 'Configurazione Firebase non trovata. Contatta il supporto';
      case 'app-not-authorized':
        return 'App non autorizzata. Configurazione Firebase non valida';
      case 'invalid-api-key':
        return 'Chiave API non valida';
      case '':
        return 'Errore di sistema. Riprova più tardi';
      default:
        print('Codice errore non gestito: "$errorCode"');
        return 'Si è verificato un errore imprevisto (codice: $errorCode). Riprova più tardi';
    }
  }
}
