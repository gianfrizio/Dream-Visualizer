import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../services/community_service.dart';
import '../l10n/app_localizations.dart';
import 'login_page.dart';

class CommunityPage extends StatefulWidget {
  const CommunityPage({Key? key}) : super(key: key);

  @override
  State<CommunityPage> createState() => _CommunityPageState();
}

class _CommunityPageState extends State<CommunityPage>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;
  final TextEditingController _searchController = TextEditingController();
  final TextEditingController _commentController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (mounted) {
        context.read<CommunityService>().loadPublicDreams();
      }
    });
  }

  @override
  void dispose() {
    _tabController.dispose();
    _searchController.dispose();
    _commentController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final localizations = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(
        title: Text(localizations.community),
        elevation: 0,
        backgroundColor: theme.colorScheme.surface,
        foregroundColor: theme.colorScheme.onSurface,
        actions: [
          Consumer<CommunityService>(
            builder: (context, communityService, child) {
              if (!communityService.isLoggedIn) {
                return IconButton(
                  icon: const Icon(Icons.login),
                  onPressed: () async {
                    final result = await Navigator.of(context).push(
                      MaterialPageRoute(
                        builder: (context) => const LoginPage(),
                      ),
                    );

                    if (result == true && mounted) {
                      communityService.loadPublicDreams();
                    }
                  },
                  tooltip: localizations.login,
                );
              } else {
                return Consumer(
                  builder: (context, authProvider, child) {
                    return PopupMenuButton<String>(
                      onSelected: (value) async {
                        if (value == 'logout') {
                          await FirebaseAuth.instance.signOut();
                          communityService.loadPublicDreams();
                        }
                      },
                      itemBuilder: (context) => [
                        PopupMenuItem(
                          value: 'logout',
                          child: Row(
                            children: [
                              const Icon(Icons.logout),
                              const SizedBox(width: 8),
                              Text(localizations.logout),
                            ],
                          ),
                        ),
                      ],
                      child: const Icon(Icons.account_circle),
                    );
                  },
                );
              }
            },
          ),
        ],
        bottom: TabBar(
          controller: _tabController,
          tabs: [
            Tab(text: localizations.explore),
            Tab(text: localizations.myDreams),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          _buildExplorePage(localizations),
          _buildMyDreamsPage(localizations),
        ],
      ),
    );
  }

  Widget _buildExplorePage(AppLocalizations localizations) {
    return Consumer<CommunityService>(
      builder: (context, communityService, child) {
        return Column(
          children: [
            // Barra di ricerca
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: TextField(
                controller: _searchController,
                decoration: InputDecoration(
                  hintText: localizations.searchDreams,
                  prefixIcon: const Icon(Icons.search),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(25),
                  ),
                  filled: true,
                  fillColor: Theme.of(context).colorScheme.surface,
                ),
                onSubmitted: (query) => _performSearch(communityService, query),
              ),
            ),

            // Lista sogni pubblici
            Expanded(child: _buildDreamsList(communityService, localizations)),
          ],
        );
      },
    );
  }

  Widget _buildMyDreamsPage(AppLocalizations localizations) {
    return Consumer<CommunityService>(
      builder: (context, communityService, child) {
        if (!communityService.isLoggedIn) {
          return _buildLoginPrompt(localizations);
        }

        return FutureBuilder<List<CommunityDream>>(
          future: communityService.getUserPublishedDreams(),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const Center(child: CircularProgressIndicator());
            }

            if (snapshot.hasError) {
              return Center(child: Text('Errore: ${snapshot.error}'));
            }

            final dreams = snapshot.data ?? [];

            if (dreams.isEmpty) {
              return Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(
                      Icons.cloud_upload,
                      size: 64,
                      color: Theme.of(context).colorScheme.primary,
                    ),
                    const SizedBox(height: 16),
                    Text(
                      localizations.noDreamsPublished,
                      style: Theme.of(context).textTheme.titleMedium,
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 8),
                    Text(
                      localizations.publishFirstDream,
                      style: Theme.of(context).textTheme.bodyMedium,
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              );
            }

            return ListView.builder(
              itemCount: dreams.length,
              itemBuilder: (context, index) {
                return _buildDreamCard(
                  dreams[index],
                  communityService,
                  localizations,
                );
              },
            );
          },
        );
      },
    );
  }

  Widget _buildLoginPrompt(AppLocalizations localizations) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.person_outline,
            size: 64,
            color: Theme.of(context).colorScheme.primary,
          ),
          const SizedBox(height: 16),
          Text(
            localizations.loginRequired,
            style: Theme.of(context).textTheme.titleMedium,
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 8),
          Text(
            localizations.loginToAccessCommunity,
            style: Theme.of(context).textTheme.bodyMedium,
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 24),
          ElevatedButton(
            onPressed: () async {
              final result = await Navigator.of(context).push(
                MaterialPageRoute(builder: (context) => const LoginPage()),
              );

              if (result == true && mounted) {
                // Login effettuato con successo, ricarica i dati
                context.read<CommunityService>().loadPublicDreams();
              }
            },
            child: Text(localizations.login),
          ),
        ],
      ),
    );
  }

  Widget _buildDreamsList(
    CommunityService communityService,
    AppLocalizations localizations,
  ) {
    if (communityService.isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    if (communityService.error != null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(communityService.error!),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: () => communityService.loadPublicDreams(),
              child: Text(localizations.retry),
            ),
          ],
        ),
      );
    }

    final dreams = communityService.publicDreams;

    if (dreams.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.explore_off,
              size: 64,
              color: Theme.of(context).colorScheme.primary,
            ),
            const SizedBox(height: 16),
            Text(
              localizations.noDreamsFound,
              style: Theme.of(context).textTheme.titleMedium,
            ),
          ],
        ),
      );
    }

    return RefreshIndicator(
      onRefresh: () => communityService.loadPublicDreams(),
      child: ListView.builder(
        itemCount: dreams.length,
        itemBuilder: (context, index) {
          return _buildDreamCard(
            dreams[index],
            communityService,
            localizations,
          );
        },
      ),
    );
  }

  Widget _buildDreamCard(
    CommunityDream dream,
    CommunityService communityService,
    AppLocalizations localizations,
  ) {
    final theme = Theme.of(context);

    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Header con autore e data
            Row(
              children: [
                CircleAvatar(
                  backgroundColor: theme.colorScheme.primary,
                  child: Text(
                    dream.authorName.isNotEmpty
                        ? dream.authorName[0].toUpperCase()
                        : 'A',
                    style: TextStyle(color: theme.colorScheme.onPrimary),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(dream.authorName, style: theme.textTheme.titleSmall),
                      Text(
                        _formatDate(dream.createdAt),
                        style: theme.textTheme.bodySmall?.copyWith(
                          color: theme.colorScheme.onSurface.withOpacity(0.6),
                        ),
                      ),
                    ],
                  ),
                ),
                PopupMenuButton<String>(
                  onSelected: (value) => _handleDreamAction(
                    value,
                    dream,
                    communityService,
                    localizations,
                  ),
                  itemBuilder: (context) => [
                    PopupMenuItem(
                      value: 'share',
                      child: Row(
                        children: [
                          const Icon(Icons.share),
                          const SizedBox(width: 8),
                          Text(localizations.share),
                        ],
                      ),
                    ),
                    PopupMenuItem(
                      value: 'report',
                      child: Row(
                        children: [
                          const Icon(Icons.flag),
                          const SizedBox(width: 8),
                          Text(localizations.report),
                        ],
                      ),
                    ),
                  ],
                ),
              ],
            ),
            const SizedBox(height: 12),

            // Titolo del sogno
            Text(
              dream.title,
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),

            // Testo del sogno (troncato)
            Text(
              dream.dreamText,
              style: theme.textTheme.bodyMedium,
              maxLines: 3,
              overflow: TextOverflow.ellipsis,
            ),
            const SizedBox(height: 8),

            // Interpretazione (troncata)
            if (dream.interpretation.isNotEmpty) ...[
              Text(
                '🔮 ${dream.interpretation}',
                style: theme.textTheme.bodySmall?.copyWith(
                  fontStyle: FontStyle.italic,
                  color: theme.colorScheme.primary,
                ),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
              const SizedBox(height: 8),
            ],

            // Tags
            if (dream.tags.isNotEmpty) ...[
              Wrap(
                spacing: 8,
                children: dream.tags
                    .take(3)
                    .map(
                      (tag) => Chip(
                        label: Text(tag),
                        labelStyle: theme.textTheme.bodySmall,
                        materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
                      ),
                    )
                    .toList(),
              ),
              const SizedBox(height: 8),
            ],

            // Azioni (like, commenti)
            Row(
              children: [
                IconButton(
                  onPressed: communityService.isLoggedIn
                      ? () => communityService.toggleLike(dream.id)
                      : null,
                  icon: Icon(
                    dream.isLikedByUser
                        ? Icons.favorite
                        : Icons.favorite_border,
                    color: dream.isLikedByUser ? Colors.red : null,
                  ),
                ),
                Text('${dream.likes}'),
                const SizedBox(width: 16),
                IconButton(
                  onPressed: () => _showCommentsDialog(
                    dream,
                    communityService,
                    localizations,
                  ),
                  icon: const Icon(Icons.comment_outlined),
                ),
                Text('${dream.comments}'),
                const Spacer(),
                TextButton(
                  onPressed: () => _showDreamDetails(dream, localizations),
                  child: Text(localizations.readMore),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  void _performSearch(CommunityService communityService, String query) async {
    if (query.trim().isEmpty) {
      communityService.loadPublicDreams();
      return;
    }

    await communityService.searchDreams(query);
    // TODO: Mostrare i risultati della ricerca
  }

  void _handleDreamAction(
    String action,
    CommunityDream dream,
    CommunityService communityService,
    AppLocalizations localizations,
  ) {
    switch (action) {
      case 'share':
        communityService.shareDream(dream);
        break;
      case 'report':
        _showReportDialog(dream, communityService, localizations);
        break;
    }
  }

  void _showDreamDetails(CommunityDream dream, AppLocalizations localizations) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(dream.title),
        content: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                localizations.dream,
                style: Theme.of(context).textTheme.titleSmall,
              ),
              const SizedBox(height: 8),
              Text(dream.dreamText),
              if (dream.interpretation.isNotEmpty) ...[
                const SizedBox(height: 16),
                Text(
                  localizations.interpretation,
                  style: Theme.of(context).textTheme.titleSmall,
                ),
                const SizedBox(height: 8),
                Text(dream.interpretation),
              ],
              if (dream.tags.isNotEmpty) ...[
                const SizedBox(height: 16),
                Text(
                  localizations.tags,
                  style: Theme.of(context).textTheme.titleSmall,
                ),
                const SizedBox(height: 8),
                Wrap(
                  spacing: 8,
                  children: dream.tags
                      .map(
                        (tag) => Chip(
                          label: Text(tag),
                          labelStyle: Theme.of(context).textTheme.bodySmall,
                        ),
                      )
                      .toList(),
                ),
              ],
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text(localizations.close),
          ),
        ],
      ),
    );
  }

  void _showCommentsDialog(
    CommunityDream dream,
    CommunityService communityService,
    AppLocalizations localizations,
  ) {
    // Carica i commenti
    communityService.loadCommentsForDream(dream.id);

    showDialog(
      context: context,
      builder: (context) => Dialog(
        child: Container(
          height: MediaQuery.of(context).size.height * 0.7,
          width: MediaQuery.of(context).size.width * 0.9,
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                localizations.comments,
                style: Theme.of(context).textTheme.titleMedium,
              ),
              const Divider(),
              Expanded(
                child: Consumer<CommunityService>(
                  builder: (context, service, child) {
                    final comments = service.getCommentsForDream(dream.id);

                    if (comments.isEmpty) {
                      return Center(child: Text(localizations.noComments));
                    }

                    return ListView.builder(
                      itemCount: comments.length,
                      itemBuilder: (context, index) {
                        final comment = comments[index];
                        return ListTile(
                          leading: CircleAvatar(
                            backgroundColor: Theme.of(
                              context,
                            ).colorScheme.primary,
                            child: Text(
                              comment.authorName.isNotEmpty
                                  ? comment.authorName[0].toUpperCase()
                                  : 'A',
                              style: TextStyle(
                                color: Theme.of(context).colorScheme.onPrimary,
                              ),
                            ),
                          ),
                          title: Text(comment.authorName),
                          subtitle: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(comment.text),
                              const SizedBox(height: 4),
                              Text(
                                _formatDate(comment.createdAt),
                                style: Theme.of(context).textTheme.bodySmall,
                              ),
                            ],
                          ),
                        );
                      },
                    );
                  },
                ),
              ),
              if (communityService.isLoggedIn) ...[
                const Divider(),
                Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: _commentController,
                        decoration: InputDecoration(
                          hintText: localizations.writeComment,
                          border: const OutlineInputBorder(),
                        ),
                        maxLines: null,
                      ),
                    ),
                    const SizedBox(width: 8),
                    IconButton(
                      onPressed: () =>
                          _submitComment(dream.id, communityService),
                      icon: const Icon(Icons.send),
                    ),
                  ],
                ),
              ],
            ],
          ),
        ),
      ),
    );
  }

  void _submitComment(String dreamId, CommunityService communityService) async {
    final text = _commentController.text.trim();
    if (text.isEmpty) return;

    final success = await communityService.addComment(dreamId, text);
    if (success) {
      _commentController.clear();
    }
  }

  void _showReportDialog(
    CommunityDream dream,
    CommunityService communityService,
    AppLocalizations localizations,
  ) {
    String selectedReason = 'inappropriate';

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(localizations.reportDream),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(localizations.selectReportReason),
            const SizedBox(height: 16),
            RadioListTile<String>(
              title: Text(localizations.inappropriateContent),
              value: 'inappropriate',
              groupValue: selectedReason,
              onChanged: (value) {
                selectedReason = value!;
              },
            ),
            RadioListTile<String>(
              title: Text(localizations.spam),
              value: 'spam',
              groupValue: selectedReason,
              onChanged: (value) {
                selectedReason = value!;
              },
            ),
            RadioListTile<String>(
              title: Text(localizations.other),
              value: 'other',
              groupValue: selectedReason,
              onChanged: (value) {
                selectedReason = value!;
              },
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text(localizations.cancel),
          ),
          ElevatedButton(
            onPressed: () async {
              final success = await communityService.reportDream(
                dream.id,
                selectedReason,
              );
              Navigator.of(context).pop();

              if (success) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text(localizations.reportSubmitted)),
                );
              }
            },
            child: Text(localizations.submit),
          ),
        ],
      ),
    );
  }

  String _formatDate(DateTime date) {
    final now = DateTime.now();
    final difference = now.difference(date);

    if (difference.inDays > 0) {
      return '${difference.inDays}g fa';
    } else if (difference.inHours > 0) {
      return '${difference.inHours}h fa';
    } else if (difference.inMinutes > 0) {
      return '${difference.inMinutes}m fa';
    } else {
      return 'Ora';
    }
  }
}
